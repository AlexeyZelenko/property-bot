import { collection, query, where, getDocs } from 'firebase/firestore';
import { db } from '../config/firebase.js';

export const getProperties = async (category, type, rooms = null) => {
  console.log(`üîç [START] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Firestore...`);
  console.log(`üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: category=${category}, type=${type}, rooms=${rooms}`);

  try {
    if (!category || !type) {
      console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞: Category –∏ Type –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!");
      throw new Error('Category and type are required');
    }

    const collectionPath = `properties/${category}/${type}`;
    console.log(`üìÅ –î–æ—Å—Ç—É–ø –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${collectionPath}`);

    const constraints = [];
    if (rooms) {
      constraints.push(where('rooms.all', '==', Number(rooms)));
      console.log(`üè† –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–Ω–∞—Ç: ${rooms}`);
    }

    const q = query(collection(db, collectionPath), ...constraints);
    console.log("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Firestore...");

    const snapshot = await getDocs(q);

    if (snapshot.empty) {
      console.warn(`‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Firestore –¥–ª—è ${category} -> ${type} (rooms: ${rooms})`);
      return [];
    }

    const properties = snapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${properties.length} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏`);
    return properties;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firestore:", error);
    throw error;
  } finally {
    console.log("üîö [END] –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω");
  }
};


const getSubcollectionDocs = async (parentDocPath) => {
  try {
    const subcollectionRef = collection(db, parentDocPath);
    const querySnapshot = await getDocs(subcollectionRef);

    return querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:", error);
  }
};

getSubcollectionDocs("properties").then(console.log);



